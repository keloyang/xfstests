#! /bin/bash
# FS QA Test No. 051
#
# Test encode/decode of nested overlay file handles
#
# This is a variant of overlay file handles test for an overlayfs that is
# composed of lower and upper layers not on the same underlying fs.
#
# - Check encode/write/decode/read content of lower/upper file handles
# - Check encode/decode/write/read content of lower/upper file handles
# - Check decode/read of unlinked lower/upper files and directories
# - Check decode/read of lower file handles after copy up, link and unlink
# - Check decode/read of lower file handles after rename of parent and self
#
# This test does not cover connectable file handles of non-directories,
# because name_to_handle_at() syscall does not support requesting connectable
# file handles.
#
# I used the following kernel test patch to run these tests with connectable
# file handles:
# --- a/fs/fhandle.c
# +++ b/fs/fhandle.c
# @@ -47,7 +47,7 @@ static long do_sys_name_to_handle(struct path *path,
#	/* we ask for a non connected handle */
#	retval = exportfs_encode_fh(path->dentry,
#				    (struct fid *)handle->f_handle,
# -				    &handle_dwords,  0);
# +				    &handle_dwords,  1);
#
#-----------------------------------------------------------------------
# Copyright (C) 2017 CTERA Networks. All Rights Reserved.
# Author: Amir Goldstein <amir73il@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
	# Unmount the non-samefs overlay mount
	$UMOUNT_PROG $SCRATCH_MNT 2>/dev/null
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here

_supported_fs overlay
_supported_os Linux
_require_test
_require_scratch
# _require_exportfs already requires open_by_handle, but let's not count on it
_require_test_program "open_by_handle"
_require_exportfs

# Lower is on test partition
lower=$OVL_BASE_TEST_DIR/$OVL_LOWER-$seq
# Upper/work are on scratch partition
upper=$OVL_BASE_SCRATCH_MNT/$OVL_UPPER
work=$OVL_BASE_SCRATCH_MNT/$OVL_WORK

lowerdir=$lower/lowertestdir
upperdir=$upper/uppertestdir
lowertestdir=$SCRATCH_MNT/lowertestdir
uppertestdir=$SCRATCH_MNT/uppertestdir
NUMFILES=1

# Create test dir and empty test files
create_test_files()
{
	local dir=$1
	local opt=$2

	src/open_by_handle -cp $dir $NUMFILES
}

# Test encode/decode file handles
test_file_handles()
{
	local dir=$1
	local opt=$2

	echo test_file_handles $* | _filter_scratch | _filter_ovl_dirs
	src/open_by_handle $opt $dir $NUMFILES
}

# Re-create lower/upper/work dirs
create_dirs()
{
	rm -rf $lower
	mkdir $lower

	_scratch_mkfs
}

# Mount an overlay on $SCRATCH_MNT with lower layer on test partition
# and upper layer on scratch partition
mount_overlay_dirs()
{
	_overlay_mount_dirs $lower $upper $work \
		$OVERLAY_MOUNT_OPTIONS overlay $SCRATCH_MNT
}

# Unmount & check the non samefs overlay mount
unmount_dirs()
{
	$UMOUNT_PROG $SCRATCH_MNT
	_overlay_check_dirs $lower $upper $work
}

# Check non-stale file handles of lower/upper files and verify
# that handle decoded before copy up is encoded to upper after
# copy up. Verify reading data from file open by file handle
# and verify access_at() with dirfd open by file handle.
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
mount_overlay_dirs
# Check encode/decode of upper regular file handles
test_file_handles $uppertestdir
# Check encode/decode of upper dir file handle
test_file_handles $uppertestdir -p
# Check encode/write/decode/read/write of upper file handles
test_file_handles $uppertestdir -wrap
# Check encode/decode of lower regular file handles before copy up
test_file_handles $lowertestdir
# Check encode/decode of lower dir file handles before copy up
test_file_handles $lowertestdir -p
# Check encode/write/decode/read/write of lower file handles across copy up
test_file_handles $lowertestdir -wrap
unmount_dirs

# Check copy up after encode/decode of lower/upper files
# (copy up of disconnected dentry to index dir)
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
mount_overlay_dirs
# Check encode/decode/write/read of upper regular file handles
test_file_handles $uppertestdir -a
test_file_handles $uppertestdir -r
# Check encode/decode/write/read of lower regular file handles
test_file_handles $lowertestdir -a
test_file_handles $lowertestdir -r
unmount_dirs

# Check non-stale handles to unlinked but open lower/upper files
create_dirs
create_test_files $upperdir
create_test_files $upperdir.rw
create_test_files $lowerdir
create_test_files $lowerdir.rw
mount_overlay_dirs
test_file_handles $uppertestdir -dk
# Check encode/write/unlink/decode/read of upper regular file handles
test_file_handles $uppertestdir.rw -rwdk
test_file_handles $lowertestdir -dk
# Check encode/write/unlink/decode/read of lower file handles across copy up
test_file_handles $lowertestdir.rw -rwdk
unmount_dirs

# Check stale handles of unlinked lower/upper files (nlink = 1,0)
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
mount_overlay_dirs
# Check decode of upper file handles after unlink/rmdir (nlink == 0)
test_file_handles $uppertestdir -dp
# Check decode of lower file handles after unlink/rmdir (nlink == 0)
test_file_handles $lowertestdir -dp
unmount_dirs

# Check non-stale file handles of linked lower/upper files (nlink = 1,2,1)
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
mount_overlay_dirs
# Check encode/decode of upper file handles (nlink == 1)
test_file_handles $uppertestdir
# Check decode/read of upper file handles after link (nlink == 2)
test_file_handles $uppertestdir -wlr
# Check decode/read of upper file handles after link + unlink (nlink == 1)
test_file_handles $uppertestdir -ur
# Check encode/decode of lower file handles before copy up (nlink == 1)
test_file_handles $lowertestdir
# Check decode/read of lower file handles after copy up + link (nlink == 2)
test_file_handles $lowertestdir -wlr
# Check decode/read of lower file handles after copy up + link + unlink (nlink == 1)
test_file_handles $lowertestdir -ur
unmount_dirs

# Check non-stale file handles of linked lower/upper hardlinks (nlink = 2,1)
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
# Create lower/upper hardlinks
test_file_handles $lowerdir -l >/dev/null
test_file_handles $upperdir -l >/dev/null
mount_overlay_dirs
# Check encode/decode of upper hardlink file handles (nlink == 2)
test_file_handles $uppertestdir
# Check decode/read of upper hardlink file handles after unlink (nlink == 1)
test_file_handles $uppertestdir -wur
# Check encode/decode of lower hardlink file handles before copy up (nlink == 2)
test_file_handles $lowertestdir
# Check decode/read of lower hardlink file handles after copy up + unlink (nlink == 1)
test_file_handles $lowertestdir -wur
unmount_dirs

# Check stale file handles of unlinked lower/upper hardlinks (nlink = 2,0)
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
# Create lower/upper hardlinks
test_file_handles $lowerdir -l >/dev/null
test_file_handles $upperdir -l >/dev/null
mount_overlay_dirs
# Check encode/decode of upper hardlink file handles (nlink == 2)
test_file_handles $uppertestdir
# Check decode of upper hardlink file handles after 2*unlink (nlink == 0)
test_file_handles $uppertestdir -d
# Check encode/decode of lower hardlink file handles before copy up (nlink == 2)
test_file_handles $lowertestdir
# Check decode of lower hardlink file handles after copy up + 2*unlink (nlink == 0)
test_file_handles $lowertestdir -d
unmount_dirs

# Check non-stale file handles of lower/upper renamed files
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
mkdir -p $lowerdir.lo $lowerdir.up $upperdir.lo $upperdir.up
mount_overlay_dirs
# Check decode/read of upper file handles after rename in same upper parent
test_file_handles $uppertestdir -wmr
# Check decode/read of lower file handles after copy up + rename in same merge parent
test_file_handles $lowertestdir -wmr
unmount_dirs

# Check non-stale file handles of lower/upper moved files
create_dirs
create_test_files $upperdir
create_test_files $lowerdir
mkdir -p $lowerdir.lo $lowerdir.up $upperdir.lo $upperdir.up
mount_overlay_dirs
# Check encode/write/decode/read of lower/upper file handles after rename of parent
mv $uppertestdir $uppertestdir.new/
mv $lowertestdir $lowertestdir.new/
test_file_handles $uppertestdir.new -rwp
test_file_handles $lowertestdir.new -rwp
# Check encode/decode/read of lower/upper file handles after move to new upper parent
mv $uppertestdir.new/* $uppertestdir.up/
mv $lowertestdir.new/* $uppertestdir.lo/
test_file_handles $uppertestdir.up -rp
test_file_handles $uppertestdir.lo -rp
# Check encode/decode/read of lower/upper file handles after move to new merge parent
mv $uppertestdir.up/* $lowertestdir.up/
mv $uppertestdir.lo/* $lowertestdir.lo/
test_file_handles $lowertestdir.up -rp
test_file_handles $lowertestdir.lo -rp
unmount_dirs

status=0
exit
